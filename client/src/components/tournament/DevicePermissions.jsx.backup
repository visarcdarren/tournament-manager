import React, { useState, useEffect } from 'react'\nimport { Shield, Users, Eye, Trash2, AlertCircle } from 'lucide-react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { useToast } from '@/hooks/use-toast'\nimport api from '@/utils/api'\n\nexport default function DevicePermissions({ tournament, isOriginalAdmin }) {\n  const { toast } = useToast()\n  const [pendingRequests, setPendingRequests] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  useEffect(() => {\n    if (isOriginalAdmin) {\n      loadPendingRequests()\n    }\n  }, [tournament.id, isOriginalAdmin])\n\n  const loadPendingRequests = async () => {\n    try {\n      const data = await api.getPendingRequests(tournament.id)\n      setPendingRequests(data.pendingRequests || [])\n    } catch (error) {\n      console.error('Failed to load pending requests:', error)\n    }\n  }\n\n  const grantRole = async (deviceId, role, stations = []) => {\n    try {\n      await api.grantRole(tournament.id, deviceId, role, stations)\n      await loadPendingRequests()\n      \n      toast({\n        title: 'Success',\n        description: `${role.toLowerCase()} access granted`\n      })\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to grant permission',\n        variant: 'destructive'\n      })\n    }\n  }\n\n  const revokeRole = async (deviceId, deviceName) => {\n    if (!confirm(`Remove access for \"${deviceName}\"?`)) {\n      return\n    }\n\n    try {\n      await api.revokeRole(tournament.id, deviceId)\n      \n      toast({\n        title: 'Success',\n        description: `Access removed for ${deviceName}`\n      })\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to revoke permission',\n        variant: 'destructive'\n      })\n    }\n  }\n\n  const getRoleIcon = (role) => {\n    switch (role) {\n      case 'ADMIN':\n        return <Shield className=\"h-4 w-4 text-primary\" />\n      case 'SCORER':\n        return <Users className=\"h-4 w-4 text-green-600\" />\n      default:\n        return <Eye className=\"h-4 w-4 text-muted-foreground\" />\n    }\n  }\n\n  const formatAuditAction = (entry) => {\n    switch (entry.action) {\n      case 'SCORE_GAME':\n        return `Scored game: ${entry.details.player1} vs ${entry.details.player2} - ${entry.details.result}`\n      case 'GRANT_PERMISSION':\n        return `Granted ${entry.details.role} role to device`\n      case 'REVOKE_PERMISSION':\n        return `Revoked permissions from device`\n      case 'CREATE_TOURNAMENT':\n        return `Created tournament: ${entry.details.tournamentName}`\n      case 'JOIN_AS_ADMIN':\n        return `Joined as admin via share link`\n      default:\n        return entry.action\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Connected Devices */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Connected Devices</CardTitle>\n          <CardDescription>\n            Manage device permissions and scorer access\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {tournament.devices?.map(device => (\n              <div\n                key={device.id}\n                className=\"flex items-center justify-between rounded-lg border p-3\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  {getRoleIcon(device.role)}\n                  <div>\n                    <div className=\"font-semibold\">{device.name}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {device.role} {device.stations?.length > 0 && `• Stations: ${device.stations.join(', ')}`}\n                      {device.id === tournament.adminDeviceId && ' (Original)'}\n                    </div>\n                  </div>\n                </div>\n                {isOriginalAdmin && device.role !== 'ADMIN' && device.id !== tournament.adminDeviceId && (\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => revokeRole(device.id, device.name)}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                {isOriginalAdmin && device.role === 'ADMIN' && device.id !== tournament.adminDeviceId && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => revokeRole(device.id, device.name)}\n                  >\n                    Remove Admin\n                  </Button>\n                )}\n              </div>\n            ))}\n            \n            {(!tournament.devices || tournament.devices.length === 0) && (\n              <div className=\"text-center py-4 text-muted-foreground\">\n                No devices connected\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pending Requests */}\n      {isOriginalAdmin && pendingRequests.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Pending Requests</CardTitle>\n            <CardDescription>\n              Device permission requests awaiting approval\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {pendingRequests.map(request => (\n                <div\n                  key={request.deviceId}\n                  className=\"flex items-center justify-between rounded-lg border p-3\"\n                >\n                  <div>\n                    <div className=\"font-semibold\">{request.deviceName}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Requested: {request.requestedRole}\n                      {request.stations?.length > 0 && ` • Stations: ${request.stations.join(', ')}`}\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => grantRole(request.deviceId, request.requestedRole, request.stations)}\n                    >\n                      Approve\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => {\n                        // Remove from pending requests without granting\n                        setPendingRequests(prev => prev.filter(r => r.deviceId !== request.deviceId))\n                      }}\n                    >\n                      Deny\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Info for non-original admins */}\n      {!isOriginalAdmin && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Device Management</CardTitle>\n            <CardDescription>\n              Device permissions are managed by the original tournament admin\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-start gap-3 rounded-lg bg-blue-50 p-4 border border-blue-200\">\n              <AlertCircle className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium text-blue-900\">\n                  Shared Admin Access\n                </p>\n                <p className=\"text-sm text-blue-700\">\n                  You have admin privileges via a share link. Only the original admin can manage device permissions.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  )\n}\n